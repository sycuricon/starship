diff --git a/scripts/vlsi_mem_gen b/scripts/vlsi_mem_gen
index ffed8d78c..2f68025b2 100755
--- a/scripts/vlsi_mem_gen
+++ b/scripts/vlsi_mem_gen
@@ -191,11 +191,64 @@ def gen_mem(name, width, depth, mask_gran, mask_seg, ports):
 endmodule" % (name, ',\n  '.join(port_spec), body if not blackbox else "")
   return s
 
+def gen_swap_mem(name, width, depth, mask_gran, mask_seg, ports):
+  assert mask_gran%8 == 0
+  addr_width = math.ceil(math.log2(depth))
+  code_line = [
+    'import "DPI-C" function void swap_memory_write_byte(byte idx, longint addr, byte data);',
+    'import "DPI-C" function byte swap_memory_read_byte(byte idx, longint addr);',
+    '',
+    f'module {name}(',
+    '\tinput W0_clk,',
+    f'\tinput [{addr_width-1}:0] W0_addr,',
+    '\tinput W0_en,',
+    f'\tinput [{width-1}:0] W0_data,',
+    f'\tinput [{mask_seg-1}:0] W0_mask,',
+    '',
+    '\tinput R0_clk,',
+    f'\tinput [{addr_width-1}:0] R0_addr,',
+    '\tinput R0_en,',
+    f'\toutput [{width-1}:0] R0_data',
+    ');',
+    '',
+    '\treg [7:0] idx;',
+    '\tinitial begin',
+    '\t\tidx = {is_variant_hierachy($sformatf("%m"))};',
+    '\tend',
+    '',
+    f'\treg [{width-1}:0] R0_tmp_data;',
+    '\tassign R0_data = R0_tmp_data;'
+  ]
+
+  offset_width = math.ceil(math.log2(width/8))
+  code_line.append('\talways @(posedge R0_clk)begin')
+  code_line.append('\t\tif (R0_en) begin')
+  for i in range(width//8):
+    code_line.append(f'\t\t\tR0_tmp_data[{i*8+7}:{i*8}] <= swap_memory_read_byte(idx, {{{64 - addr_width - offset_width}\'h0 ,R0_addr, {offset_width}\'d{i}}});')
+  code_line.append('\t\tend')
+  code_line.append('\tend')
+
+  code_line.append('\talways @(posedge W0_clk)begin')
+  code_line.append('\t\tif (W0_en) begin')
+  for i in range(mask_seg):
+    for j in range(mask_gran//8):
+      byte_index = i*mask_gran//8 + j
+      code_line.append(f'\t\t\tif(W0_mask[{i}])swap_memory_write_byte(idx, {{{64 - addr_width - offset_width}\'h0 ,R0_addr, {offset_width}\'d{byte_index}}}, W0_data[{byte_index*8+7}:{byte_index*8}]);')
+  code_line.append('\t\tend')
+  code_line.append('\tend')
+
+  code_line.append('')
+  code_line.append('endmodule')
+  return '\n'.join(code_line)
+
 def main(args):
   f = open(args.output_file, "w") if (args.output_file) else None
   conf_file = args.conf
   for line in open(conf_file):
-    parsed_line = gen_mem(*parse_line(line))
+    if args.swap:
+      parsed_line = gen_swap_mem(*parse_line(line))
+    else:
+      parsed_line = gen_mem(*parse_line(line))
     if f is not None:
         f.write(parsed_line)
     else:
@@ -208,6 +261,7 @@ if __name__ == '__main__':
   parser.add_argument('--blackbox', '-b', action='store_true', help='set to disable output of module body')
   #parser.add_argument('--use_latches', '-l', action='store_true', help='set to enable use of latches')
   parser.add_argument('--output_file', '-o', help='name of output file, default is stdout')
+  parser.add_argument('--swap', action='store_true', help="use swap memory")
   args = parser.parse_args()
   blackbox = args.blackbox
   #use_latches = args.use_latches
